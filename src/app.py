# =============================================================================
# File: src/app.py
# Role: Contains the Streamlit web application for the user interface.
# =============================================================================

# --- 1. Importing necessary libraries ---
import streamlit as st
import pandas as pd
import plotly.express as px
import joblib
import shap
import matplotlib.pyplot as plt

# --- App setup ---
st.set_page_config(
    page_title="AI Churn Dashboard",
    page_icon="🤖",
    layout="wide"
)

# --- 3. Data Loading and Model Loading ---
@st.cache_data
def load_data(path):
    """Loads data from a CSV file."""
    df = pd.read_csv(path)
    # Handle missing TotalCharges for new customers
    df['TotalCharges'] = pd.to_numeric(df['TotalCharges'], errors='coerce')
    df['TotalCharges'] = df['TotalCharges'].fillna(0)
    return df

@st.cache_resource
def load_model(path):
    """Loads a pre-trained model."""
    model = joblib.load(path)
    return model

# Load data and model
df_data = load_data('data/WA_Fn-UseC_-Telco-Customer-Churn.csv')
model = load_model('src/models/catboost_churn_model.joblib')

# --- XAI Setup ---
@st.cache_resource
def get_shap_explainer(_model):
    """Creates a SHAP Tree explainer for the given model."""
    return shap.TreeExplainer(_model)

explainer = get_shap_explainer(model)

# --- Page Functions ---

def page_customer_diagnosis():
    """
    Displays the page for diagnosing a single customer.
    """
    st.title("🤖 Customer Churn Prediction Dashboard")
    st.markdown("This application is a functional mock-up that predicts a customer's risk of leaving and aims to explain the reasons behind this prediction.")
    st.markdown("---")

    # --- SIDEBAR for user controls ---
    st.sidebar.header("⚙️ Selection Parameters")

    # Creating the dropdown menu to select a customer
    customer_ids_list = df_data['customerID'].tolist()
    selected_customer_id = st.sidebar.selectbox(
        "Select a Customer ID for analysis:",
        customer_ids_list
    )

    # --- MAIN PANEL for displaying results ---
    st.header(f"📊 Diagnosis for Customer: {selected_customer_id}")

    # Retrieving the data row for the selected customer
    client_info = df_data[df_data['customerID'] == selected_customer_id]

    # Preprocess the customer data for prediction
    # The model was trained on all columns except 'customerID' and 'Churn'
    prediction_features = client_info.drop(columns=['customerID', 'Churn'])

    # Make prediction
    churn_probability = model.predict_proba(prediction_features)[0][1]

    # Organizing the display into two columns for better readability
    col1, col2 = st.columns(2)

    # Left column: Display of the prediction
    with col1:
        st.subheader("🔮 Churn Risk Prediction")
        
        st.metric("Probability of Churn", f"{churn_probability:.0%}")
        
        if churn_probability > 0.5:
            st.error("🔴 Predicted Status: High-Risk Churn Customer")
        else:
            st.success("🟢 Predicted Status: Loyal Customer")
        
        st.info("This prediction is generated by a CatBoost model.", icon="ℹ️")

    # Right column: Display of basic customer information
    with col2:
        st.subheader("👤 Customer Information")
        st.write(client_info.T.rename(columns={client_info.index[0]: 'Details'}))

    st.markdown("---")

    # Section for XAI explanation
    st.header("🧠 Influence Factors (XAI Analysis)")

    # Calculate SHAP values for the selected customer
    shap_values = explainer.shap_values(prediction_features)

    # --- Display SHAP Force Plot ---
    st.subheader("Visual Contribution Chart")
    shap_plot = shap.force_plot(
        explainer.expected_value,
        shap_values[0, :],
        prediction_features.iloc[0, :],
        matplotlib=True,
        show=False,
        figsize=(20, 5),
        text_rotation=15
    )
    st.pyplot(shap_plot, bbox_inches='tight')
    plt.close()

    st.subheader("How to Read This Chart")
    st.markdown(f"""
    This "force plot" illustrates the factors driving the churn prediction for this specific customer.

    - **Base Value ({explainer.expected_value:.2f})**: This is the average churn probability across all customers. The model starts with this baseline.
    - **Features in Red**: These are the characteristics of this customer that are **increasing** their risk of churning. The larger the bar, the stronger the push towards churning.
    - **Features in Blue**: These are the characteristics that are **decreasing** their churn risk, pulling the prediction to the left. The larger the bar, the stronger the pull towards loyalty.
    - **Final Prediction (f(x))**: The final output value on the chart represents the model's precise churn probability for this customer after all the red and blue forces are combined.
    """)

    # --- Generate Text-Based Explanation ---
    st.subheader("Summary of Prediction Factors")
    
    # Create a DataFrame for easier analysis
    feature_names = prediction_features.columns
    feature_values = prediction_features.iloc[0].values
    shap_df = pd.DataFrame({
        'feature': feature_names,
        'value': feature_values,
        'shap_value': shap_values[0]
    })
    shap_df['abs_shap'] = shap_df['shap_value'].abs()
    shap_df = shap_df.sort_values(by='abs_shap', ascending=False)

    # Separate positive and negative contributors
    positive_contributors = shap_df[shap_df['shap_value'] > 0]
    negative_contributors = shap_df[shap_df['shap_value'] < 0]

    base_value = explainer.expected_value
    final_prediction = churn_probability

    st.markdown(f"""
    The model's prediction for this customer starts from a **base probability of {base_value:.2%}**. 
    After considering the customer's specific details, the final **predicted churn probability is {final_prediction:.2%}**.

    Here are the key factors influencing this prediction:
    """)

    if not positive_contributors.empty:
        st.markdown("#### Factors Increasing Churn Risk:")
        for _, row in positive_contributors.head(3).iterrows():
            st.markdown(f"- **{row['feature']} = {row['value']}**: This is a significant factor pushing the prediction higher.")

    if not negative_contributors.empty:
        st.markdown("#### Factors Decreasing Churn Risk:")
        for _, row in negative_contributors.head(3).iterrows():
            st.markdown(f"- **{row['feature']} = {row['value']}**: This is a key factor pulling the prediction lower, indicating customer loyalty.")



def page_global_analytics():
    """
    Displays the global analytics page.
    """
    st.title("📈 Global Customer Analytics")
    st.markdown("This page provides a global overview of the customer base.")
    st.markdown("---")

    # --- Row 1: Key Metrics ---
    st.header("Key Metrics")
    col1, col2, col3 = st.columns(3)
    total_customers = df_data.shape[0]
    churn_rate = (df_data['Churn'].value_counts(normalize=True)['Yes'] * 100)
    average_tenure = df_data['tenure'].mean()

    col1.metric("Total Customers", f"{total_customers}")
    col2.metric("Churn Rate", f"{churn_rate:.2f}%")
    col3.metric("Average Tenure (Months)", f"{average_tenure:.1f}")

    st.markdown("---")

    # --- Row 2: Charts ---
    st.header("Visualizations")
    col1, col2 = st.columns(2)

    with col1:
        st.subheader("Churn by Contract Type")
        fig = px.sunburst(df_data, path=['Contract', 'Churn'], title='Churn Distribution by Contract Type')
        st.plotly_chart(fig, use_container_width=True)

    with col2:
        st.subheader("Gender Distribution")
        gender_counts = df_data['gender'].value_counts().reset_index()
        gender_counts.columns = ['gender', 'count']
        fig = px.pie(gender_counts, values='count', names='gender', title='Customer Gender Distribution')
        st.plotly_chart(fig, use_container_width=True)

    # --- Row 3: More Charts ---
    col3, col4 = st.columns(2)

    with col3:
        st.subheader("Customer Tenure Distribution")
        fig = px.histogram(df_data, x='tenure', nbins=30, title='Customer Tenure (Months)')
        st.plotly_chart(fig, use_container_width=True)

    with col4:
        st.subheader("Monthly Charges Distribution")
        fig = px.histogram(df_data, x='MonthlyCharges', nbins=30, title='Monthly Charges ($)')
        st.plotly_chart(fig, use_container_width=True)

    st.markdown("---")

    # --- Row 4: Data Table ---
    st.header("Raw Data (First 10 Customers)")
    st.dataframe(df_data.head(10))

    # Align button to the right
    _, col_button = st.columns([10, 1])
    with col_button:
        if st.button("See more..."):
            st.session_state.page = 'Customer Diagnosis'
            st.rerun()

# --- Sidebar Navigation ---
st.sidebar.title("Navigation")

if 'page' not in st.session_state:
    st.session_state.page = 'Global Analytics'

if st.sidebar.button("Customer Diagnosis"):
    st.session_state.page = 'Customer Diagnosis'
    
if st.sidebar.button("Global Analytics"):
    st.session_state.page = 'Global Analytics'

# --- Page Routing ---
if st.session_state.page == 'Customer Diagnosis':
    page_customer_diagnosis()
elif st.session_state.page == 'Global Analytics':
    page_global_analytics()
