# =============================================================================
# File: src/app.py
# Role: Contains the Streamlit web application for the user interface.
# =============================================================================

# --- 1. Importing necessary libraries ---
import streamlit as st
import pandas as pd
import plotly.express as px

# --- App setup ---
st.set_page_config(
    page_title="AI Churn Dashboard",
    page_icon="ü§ñ",
    layout="wide"
)

# --- 3. Data Loading (with caching for performance) ---
@st.cache_data
def load_data(path):
    """Loads data from a CSV file."""
    df = pd.read_csv(path)
    # Handle missing TotalCharges for new customers
    df['TotalCharges'] = pd.to_numeric(df['TotalCharges'], errors='coerce')
    df['TotalCharges'] = df['TotalCharges'].fillna(0)
    return df

# Load data
df_data = load_data('data/WA_Fn-UseC_-Telco-Customer-Churn.csv')

# --- Page Functions ---

def page_customer_diagnosis():
    """
    Displays the page for diagnosing a single customer.
    """
    st.title("ü§ñ Customer Churn Prediction Dashboard")
    st.markdown("This application is a functional mock-up that predicts a customer's risk of leaving and aims to explain the reasons behind this prediction.")
    st.markdown("---")

    # --- SIDEBAR for user controls ---
    st.sidebar.header("‚öôÔ∏è Selection Parameters")

    # Creating the dropdown menu to select a customer
    customer_ids_list = df_data['customerID'].tolist()
    selected_customer_id = st.sidebar.selectbox(
        "Select a Customer ID for analysis:",
        customer_ids_list
    )

    # --- MAIN PANEL for displaying results ---
    st.header(f"üìä Diagnosis for Customer: {selected_customer_id}")

    # Retrieving the data row for the selected customer
    client_info = df_data[df_data['customerID'] == selected_customer_id]

    # Organizing the display into two columns for better readability
    col1, col2 = st.columns(2)

    # Left column: Display of the prediction (currently dummy)
    with col1:
        st.subheader("üîÆ Churn Risk Prediction")
        
        churn_probability = 0.85 # Example static value
        
        st.metric("Probability of Churn", f"{churn_probability:.0%}")
        
        if churn_probability > 0.5:
            st.error("üî¥ Predicted Status: High-Risk Churn Customer")
        else:
            st.success("üü¢ Predicted Status: Loyal Customer")
        
        st.info("This prediction will be generated by an AI model (XGBoost) after the backend is developed.", icon="‚ÑπÔ∏è")

    # Right column: Display of basic customer information
    with col2:
        st.subheader("üë§ Customer Information")
        st.write(client_info.T.rename(columns={client_info.index[0]: 'Details'}))

    st.markdown("---")

    # Section for XAI explanation (with a visual placeholder)
    st.header("üß† Influence Factors (XAI Analysis)")
    st.warning(
        "This section is pending backend development. "
        "It will display a chart explaining the reasons for the model's prediction.",
        icon="‚ö†Ô∏è"
    )
    st.image(
        'https://miro.medium.com/v2/resize:fit:1400/1*j_3_2N9NArY9i-5n12t3zA.png',
        caption="Example of an explainability chart (SHAP) that will be generated here."
    )

def page_global_analytics():
    """
    Displays the global analytics page.
    """
    st.title("üìà Global Customer Analytics")
    st.markdown("This page provides a global overview of the customer base.")
    st.markdown("---")

    # --- Row 1: Key Metrics ---
    st.header("Key Metrics")
    col1, col2, col3 = st.columns(3)
    total_customers = df_data.shape[0]
    churn_rate = (df_data['Churn'].value_counts(normalize=True)['Yes'] * 100)
    average_tenure = df_data['tenure'].mean()

    col1.metric("Total Customers", f"{total_customers}")
    col2.metric("Churn Rate", f"{churn_rate:.2f}%")
    col3.metric("Average Tenure (Months)", f"{average_tenure:.1f}")

    st.markdown("---")

    # --- Row 2: Charts ---
    st.header("Visualizations")
    col1, col2 = st.columns(2)

    with col1:
        st.subheader("Churn by Contract Type")
        fig = px.sunburst(df_data, path=['Contract', 'Churn'], title='Churn Distribution by Contract Type')
        st.plotly_chart(fig, use_container_width=True)

    with col2:
        st.subheader("Gender Distribution")
        gender_counts = df_data['gender'].value_counts().reset_index()
        gender_counts.columns = ['gender', 'count']
        fig = px.pie(gender_counts, values='count', names='gender', title='Customer Gender Distribution')
        st.plotly_chart(fig, use_container_width=True)

    # --- Row 3: More Charts ---
    col3, col4 = st.columns(2)

    with col3:
        st.subheader("Customer Tenure Distribution")
        fig = px.histogram(df_data, x='tenure', nbins=30, title='Customer Tenure (Months)')
        st.plotly_chart(fig, use_container_width=True)

    with col4:
        st.subheader("Monthly Charges Distribution")
        fig = px.histogram(df_data, x='MonthlyCharges', nbins=30, title='Monthly Charges ($)')
        st.plotly_chart(fig, use_container_width=True)

    st.markdown("---")

    # --- Row 4: Data Table ---
    st.header("Raw Data (First 10 Customers)")
    st.dataframe(df_data.head(10))

    # Align button to the right
    _, col_button = st.columns([10, 1])
    with col_button:
        if st.button("See more..."):
            st.session_state.page = 'Customer Diagnosis'
            st.rerun()

# --- Sidebar Navigation ---
st.sidebar.title("Navigation")

if 'page' not in st.session_state:
    st.session_state.page = 'Global Analytics'

if st.sidebar.button("Customer Diagnosis"):
    st.session_state.page = 'Customer Diagnosis'
    
if st.sidebar.button("Global Analytics"):
    st.session_state.page = 'Global Analytics'

# --- Page Routing ---
if st.session_state.page == 'Customer Diagnosis':
    page_customer_diagnosis()
elif st.session_state.page == 'Global Analytics':
    page_global_analytics()
